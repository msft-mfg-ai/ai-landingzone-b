# ------------------------------------------------------------------------------------------------------------------------
# Reusable Workflow: Docker Build to a Registry
# ------------------------------------------------------------------------------------------------------------------------
name: z_template_docker_build
run-name: Build Docker Image
on:
  workflow_call:
    inputs:
      APP_PATH:
        required: true
        type: string
      ACR_REPO_NAME:
        required: true
        type: string
      ACR_APP_NAME:
        required: true
        type: string
      ACR_NAME:
        required: true
        type: string
      PUSH_TO_ACR:
        required: false
        type: boolean
        default: true
      RESOURCE_GROUP:
        required: true
        type: string
      ACR_FW_UPDATE:
        required: false
        type: boolean
        default: true
      DOCKER_PUSH_TYPE:
        required: false
        type: string
        default: 'TASK'
      ENV_CODE:
        required: true
        type: string
        default: 'dv'

# ------------------------------------------------------------------------------------------------------------------------
    outputs:
      IMAGE_NAME:
        value: ${{ jobs.build.outputs.IMAGE_NAME  }}
      IMAGE_VERSION:
        value: ${{ jobs.build.outputs.IMAGE_VERSION  }}
      APP_PATH:
        value: ${{ inputs.APP_PATH  }}
      ACR_REPO_NAME:
        value: ${{ inputs.ACR_REPO_NAME  }}
      ACR_APP_NAME:
        value: ${{ inputs.ACR_APP_NAME  }}
    
# ------------------------------------------------------------------------------------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV_CODE  }}
    outputs:
      IMAGE_NAME: ${{ steps.vars.outputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ steps.vars.outputs.IMAGE_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the current date and repo name
        id: vars
        run: |
          readonly TAG=$(date +'%Y%m%d%H%M')
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          readonly rundatetime=$(date +'%Y-%m-%dT%H:%M:%SZ')
          echo "rundatetime=$rundatetime" >> $GITHUB_OUTPUT
          readonly rundate=$(date +'%Y.%m.%d')
          echo "rundate=$rundate" >> $GITHUB_OUTPUT
          readonly commitbranch=$(echo ${GITHUB_REF#refs/heads/})
          echo "commitbranch=$commitbranch" >> $GITHUB_OUTPUT
          readonly commitsha=${GITHUB_SHA::6}
          echo "commitsha=$commitsha" >> $GITHUB_OUTPUT

          IMAGE_VERSION=$TAG
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_OUTPUT
          IMAGE_NAME="$(echo ${{ inputs.ACR_REPO_NAME }}/${{ inputs.ACR_APP_NAME }}:$IMAGE_VERSION | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          IMAGE_NAME_NO_TAG="$(echo ${{ inputs.ACR_REPO_NAME }}/${{ inputs.ACR_APP_NAME }} | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_NAME_NO_TAG=$IMAGE_NAME_NO_TAG" >> $GITHUB_OUTPUT

      - name: Display Variables and Files
        run: |-
          echo "inputs.ACR_NAME=${{ inputs.ACR_NAME }}"

          echo "inputs.ACR_REPO_NAME=${{ inputs.ACR_REPO_NAME }}"
          echo "inputs.ACR_APP_NAME=${{ inputs.ACR_APP_NAME }}"
          echo "inputs.APP_PATH=${{ inputs.APP_PATH }}"

          echo "steps.vars.TAG=${{ steps.vars.outputs.TAG }}"
          echo "steps.vars.IMAGE_VERSION=${{ steps.vars.outputs.IMAGE_VERSION }}"
          echo "steps.vars.IMAGE_NAME=${{ steps.vars.outputs.IMAGE_NAME }}"

          echo "---------------------------------"
          echo "##[group]All Variables:"
          echo "Environment:"
          echo '${{ toJSON(env) }}'
          echo "Variables:"
          echo '${{ toJSON(vars) }}'
          echo "Secrets:"
          echo '${{ toJSON(secrets) }}'
          echo "Inputs:"
          echo '${{ toJSON(inputs) }}'
          echo "##[endgroup]"

          echo "---------------------------------"
          echo "##[group]Directory of ${{ github.workspace  }}"
          tree -R ${{ github.workspace  }}
          echo "##[endgroup]"
        continue-on-error: true

      - name: Put Build Details in buildinfo.json
        shell: bash
        run: |
          echo -e -n "{\"buildDate\":\"${{ steps.vars.outputs.rundatetime }}\",\"buildNumber\":\"${{ steps.vars.outputs.rundate }}.${{ github.run_number }}\",\"buildId\":\"${{ github.run_id }}.${{ github.run_attempt }}\",\"imageTag\":\"${{ steps.vars.outputs.TAG}}\",\"run_id\":\"${{ github.run_id }}\",\"run_attempt\":\"${{ github.run_attempt }}\",\"run_number\":\"${{ github.run_number }}\",\"branchName\":\"${{ steps.vars.outputs.commitbranch }}\",\"commitHash\":\"${{ steps.vars.outputs.commitsha }}\"}" > ${{ github.workspace }}/${{ inputs.APP_PATH }}/Resources/buildinfo.json

      - name: Azure Login (Reusable Action)
        uses: ./.github/actions/login-action
        with:
          client-id: ${{ secrets.CICD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.CICD_CLIENT_SECRET }}

      - name: Get Agent IP Address
        id: get-ip
        if: ${{ inputs.PUSH_TO_ACR && inputs.ACR_FW_UPDATE }}
        run: echo "agentIpAddress=`curl -s http://ifconfig.me/ip`" >> $GITHUB_OUTPUT
        
      - name: 'ACR: Add Agent to FW'
        if: ${{ inputs.PUSH_TO_ACR && inputs.ACR_FW_UPDATE }}
        run: |
           echo "Executing: az acr network-rule add --name ${{ inputs.ACR_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --ip-address ${{ steps.get-ip.outputs.agentIpAddress }}"
           az acr network-rule add --name ${{ inputs.ACR_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --ip-address  ${{ steps.get-ip.outputs.agentIpAddress }}
           # wait for the ACR to update
           sleep 10
           # check the ACR FW rules
           az acr network-rule list --name ${{ inputs.ACR_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --output table

      - name: ACR Login
        if: ${{ inputs.PUSH_TO_ACR }}
        run: |
            az acr login -n ${{ inputs.ACR_NAME }}

      # -- Task Based Docker Push Commands ----------------------------------------------------------------------
      - name: Get metadata Task 
        uses: docker/metadata-action@v5
        if: ${{ inputs.PUSH_TO_ACR  && inputs.DOCKER_PUSH_TYPE == 'TASK' }}
        id: meta
        with:
          images: ${{ inputs.ACR_NAME }}.azurecr.io/${{ steps.vars.outputs.IMAGE_NAME_NO_TAG }}
          labels: |
            org.opencontainers.image.title=AI Chat UI
            org.opencontainers.image.source=msft-mfg-ai.github.com
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ steps.vars.outputs.TAG }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

        # removed this tag...
        #  type=sha

      - name: Task Build and push
        uses: docker/build-push-action@v6
        if: ${{ inputs.PUSH_TO_ACR && inputs.DOCKER_PUSH_TYPE == 'TASK' }}
        with:
          context: '${{ github.workspace }}/${{ inputs.APP_PATH }}'
          push: ${{ github.event_name != 'pull_request' }}
          labels: ${{ steps.meta.outputs.labels }}            
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
            APP_VERSION=${{ steps.vars.outputs.IMAGE_NAME }}
      # END -- Task Based Docker Push Commands ----------------------------------------------------------------------

      # -- Native Docker Push Commands ----------------------------------------------------------------------
      - name: Native Docker Build
        if: ${{ inputs.PUSH_TO_ACR && inputs.DOCKER_PUSH_TYPE == 'NATIVE' }}
        id: docker-build
        working-directory: '${{ github.workspace }}/${{ inputs.APP_PATH }}'
        run: |
            docker build . -t ${{ steps.vars.outputs.IMAGE_NAME }}
            docker images

      - name: Native Docker Push
        if: ${{ inputs.PUSH_TO_ACR && inputs.DOCKER_PUSH_TYPE == 'NATIVE' }}
        working-directory: '${{ github.workspace }}/${{ inputs.APP_PATH }}'
        run: |
            docker tag ${{ steps.vars.outputs.IMAGE_NAME }} ${{ inputs.ACR_NAME }}.azurecr.io/${{ steps.vars.outputs.IMAGE_NAME }}
            docker push ${{ inputs.ACR_NAME }}.azurecr.io/${{ steps.vars.outputs.IMAGE_NAME }}
      # END -- Native Docker Push Commands ----------------------------------------------------------------------
      
      - name: 'ACR: Remove Agent from FW'
        if: ${{ inputs.PUSH_TO_ACR && inputs.ACR_FW_UPDATE }}
        run: |
           echo "Executing: az acr network-rule remove --name ${{ inputs.ACR_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --ip-address  ${{ steps.get-ip.outputs.agentIpAddress }}"
           az acr network-rule remove --name ${{ inputs.ACR_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP }} --ip-address  ${{ steps.get-ip.outputs.agentIpAddress }}

      ## ------------------------------------------------------------------------------------------------------------------------
      # It would be nice to get these parms working right and just use this task..., but they are not quite right yet
      # - name: Docker Build & Push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: '${{ github.workspace }}/${{ inputs.APP_PATH }}'
      #     push: true
      #     tags: ${{ inputs.ACR_NAME }}.azurecr.io/${{ steps.vars.outputs.IMAGE_NAME }}

          